name: Build & Deploy Backend

on:
  workflow_run:
    workflows:
      - Migrations
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        app:
          [
            api-gateway,
            payment-service,
            transaction-aggregator,
            processing-service,
            notification-service,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Extract metadata for docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}_${{ matrix.app }}
          tags: type=sha,format=short,prefix=

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: APP=${{ matrix.app }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract commit short SHA
        run: echo "COMMIT_SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: starge.xyz
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/app/starge-stack/compose
            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            export TAG=${{ env.COMMIT_SHORT_SHA }}
            export BOT_SECRET_PATH=${{ secrets.BOT_SECRET_PATH }}
            export BOT_API_SECRET=${{ secrets.BOT_API_SECRET }}
            docker compose -f docker-compose.services.yaml pull
            docker compose -f docker-compose.services.yaml up -d
            docker image prune -af
