generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @unique
  invoices     Invoice[]
  transactions Transaction[]
  settings     Settings?

  @@map("users")
}

model Invoice {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @map("user_id")
  address      String
  starsAmount  Int      @map("stars_amount")
  tokenAmount  Float    @map("token_amount")
  tokenSymbol  Symbol   @map("token_symbol")
  lpFee        Int      @map("liquidity_provider_fee")
  bchFees      Int      @map("blockchain_fees")
  hash         String   @unique @map("invoice_hash")
  canBeDeleted Boolean  @default(true) @map("can_be_deleted")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("invoices")
}

model Transaction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  address     String
  starsAmount Int      @map("stars_amount")
  tokenAmount Float    @map("token_amount")
  tokenSymbol Symbol   @map("token_symbol")
  lpFee       Int      @map("liquidity_provider_fee")
  bchFees     Int      @map("blockchain_fees")
  status      Status   @default(PENDING)
  hash        String   @unique @map("transaction_hash")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("transactions")
}

model Settings {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     @unique @map("user_id")
  tokenSymbol   Symbol  @default(TON) @map("token_symbol")
  vibration     Boolean @default(true) @map("in_app_vibration")
  notifications Boolean @default(true) @map("in_app_notifications")

  @@map("settings")
}

enum Symbol {
  TON
  USDT
}

enum Status {
  PENDING
  CONFIRMED
  FAILED
}
